// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: etf/fund.proto

package types

import (
	fmt "fmt"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/defund-labs/defund/x/broker/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	github_com_gogo_protobuf_types "github.com/gogo/protobuf/types"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	io "io"
	math "math"
	math_bits "math/bits"
	time "time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type FundPrice struct {
	Id     string      `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Height int64       `protobuf:"varint,2,opt,name=height,proto3" json:"height,omitempty"`
	Time   time.Time   `protobuf:"bytes,3,opt,name=time,proto3,stdtime" json:"time" yaml:"time"`
	Amount *types.Coin `protobuf:"bytes,4,opt,name=amount,proto3" json:"amount,omitempty"`
	Symbol string      `protobuf:"bytes,5,opt,name=symbol,proto3" json:"symbol,omitempty"`
}

func (m *FundPrice) Reset()         { *m = FundPrice{} }
func (m *FundPrice) String() string { return proto.CompactTextString(m) }
func (*FundPrice) ProtoMessage()    {}
func (*FundPrice) Descriptor() ([]byte, []int) {
	return fileDescriptor_2f7de7f2b67d1612, []int{0}
}
func (m *FundPrice) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FundPrice) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FundPrice.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FundPrice) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FundPrice.Merge(m, src)
}
func (m *FundPrice) XXX_Size() int {
	return m.Size()
}
func (m *FundPrice) XXX_DiscardUnknown() {
	xxx_messageInfo_FundPrice.DiscardUnknown(m)
}

var xxx_messageInfo_FundPrice proto.InternalMessageInfo

func (m *FundPrice) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *FundPrice) GetHeight() int64 {
	if m != nil {
		return m.Height
	}
	return 0
}

func (m *FundPrice) GetTime() time.Time {
	if m != nil {
		return m.Time
	}
	return time.Time{}
}

func (m *FundPrice) GetAmount() *types.Coin {
	if m != nil {
		return m.Amount
	}
	return nil
}

func (m *FundPrice) GetSymbol() string {
	if m != nil {
		return m.Symbol
	}
	return ""
}

type Holding struct {
	Token   string `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
	Percent int64  `protobuf:"varint,2,opt,name=percent,proto3" json:"percent,omitempty"`
	// Pool ID of the Pool for this holding on Broker
	PoolId uint64 `protobuf:"varint,3,opt,name=poolId,proto3" json:"poolId,omitempty"`
	// Broker Id for the Broker
	BrokerId string `protobuf:"bytes,4,opt,name=brokerId,proto3" json:"brokerId,omitempty"`
	// the type of the asset. Valid types are spot, staked
	Type string `protobuf:"bytes,5,opt,name=type,proto3" json:"type,omitempty"`
}

func (m *Holding) Reset()         { *m = Holding{} }
func (m *Holding) String() string { return proto.CompactTextString(m) }
func (*Holding) ProtoMessage()    {}
func (*Holding) Descriptor() ([]byte, []int) {
	return fileDescriptor_2f7de7f2b67d1612, []int{1}
}
func (m *Holding) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Holding) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Holding.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Holding) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Holding.Merge(m, src)
}
func (m *Holding) XXX_Size() int {
	return m.Size()
}
func (m *Holding) XXX_DiscardUnknown() {
	xxx_messageInfo_Holding.DiscardUnknown(m)
}

var xxx_messageInfo_Holding proto.InternalMessageInfo

func (m *Holding) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

func (m *Holding) GetPercent() int64 {
	if m != nil {
		return m.Percent
	}
	return 0
}

func (m *Holding) GetPoolId() uint64 {
	if m != nil {
		return m.PoolId
	}
	return 0
}

func (m *Holding) GetBrokerId() string {
	if m != nil {
		return m.BrokerId
	}
	return ""
}

func (m *Holding) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

type Fund struct {
	Symbol              string     `protobuf:"bytes,1,opt,name=symbol,proto3" json:"symbol,omitempty"`
	Address             string     `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
	Name                string     `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Description         string     `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
	Shares              types.Coin `protobuf:"bytes,5,opt,name=shares,proto3" json:"shares" yaml:"total_shares"`
	Holdings            []Holding  `protobuf:"bytes,6,rep,name=holdings,proto3" json:"holdings" yaml:"holdings" json:"holdings"`
	Rebalance           int64      `protobuf:"varint,7,opt,name=rebalance,proto3" json:"rebalance,omitempty"`
	BaseDenom           string     `protobuf:"bytes,8,opt,name=baseDenom,proto3" json:"baseDenom,omitempty"`
	StartingPrice       types.Coin `protobuf:"bytes,9,opt,name=startingPrice,proto3" json:"startingPrice" yaml:"starting_price"`
	Creator             string     `protobuf:"bytes,10,opt,name=creator,proto3" json:"creator,omitempty"`
	LastRebalanceHeight int64      `protobuf:"varint,11,opt,name=lastRebalanceHeight,proto3" json:"lastRebalanceHeight,omitempty"`
}

func (m *Fund) Reset()         { *m = Fund{} }
func (m *Fund) String() string { return proto.CompactTextString(m) }
func (*Fund) ProtoMessage()    {}
func (*Fund) Descriptor() ([]byte, []int) {
	return fileDescriptor_2f7de7f2b67d1612, []int{2}
}
func (m *Fund) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Fund) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Fund.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Fund) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Fund.Merge(m, src)
}
func (m *Fund) XXX_Size() int {
	return m.Size()
}
func (m *Fund) XXX_DiscardUnknown() {
	xxx_messageInfo_Fund.DiscardUnknown(m)
}

var xxx_messageInfo_Fund proto.InternalMessageInfo

func (m *Fund) GetSymbol() string {
	if m != nil {
		return m.Symbol
	}
	return ""
}

func (m *Fund) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *Fund) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Fund) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *Fund) GetShares() types.Coin {
	if m != nil {
		return m.Shares
	}
	return types.Coin{}
}

func (m *Fund) GetHoldings() []Holding {
	if m != nil {
		return m.Holdings
	}
	return nil
}

func (m *Fund) GetRebalance() int64 {
	if m != nil {
		return m.Rebalance
	}
	return 0
}

func (m *Fund) GetBaseDenom() string {
	if m != nil {
		return m.BaseDenom
	}
	return ""
}

func (m *Fund) GetStartingPrice() types.Coin {
	if m != nil {
		return m.StartingPrice
	}
	return types.Coin{}
}

func (m *Fund) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *Fund) GetLastRebalanceHeight() int64 {
	if m != nil {
		return m.LastRebalanceHeight
	}
	return 0
}

type Redeem struct {
	Id      string      `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Creator string      `protobuf:"bytes,2,opt,name=creator,proto3" json:"creator,omitempty"`
	Fund    *Fund       `protobuf:"bytes,3,opt,name=fund,proto3" json:"fund,omitempty"`
	Amount  *types.Coin `protobuf:"bytes,4,opt,name=amount,proto3" json:"amount,omitempty"`
	Status  string      `protobuf:"bytes,5,opt,name=status,proto3" json:"status,omitempty"`
}

func (m *Redeem) Reset()         { *m = Redeem{} }
func (m *Redeem) String() string { return proto.CompactTextString(m) }
func (*Redeem) ProtoMessage()    {}
func (*Redeem) Descriptor() ([]byte, []int) {
	return fileDescriptor_2f7de7f2b67d1612, []int{3}
}
func (m *Redeem) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Redeem) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Redeem.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Redeem) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Redeem.Merge(m, src)
}
func (m *Redeem) XXX_Size() int {
	return m.Size()
}
func (m *Redeem) XXX_DiscardUnknown() {
	xxx_messageInfo_Redeem.DiscardUnknown(m)
}

var xxx_messageInfo_Redeem proto.InternalMessageInfo

func (m *Redeem) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Redeem) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *Redeem) GetFund() *Fund {
	if m != nil {
		return m.Fund
	}
	return nil
}

func (m *Redeem) GetAmount() *types.Coin {
	if m != nil {
		return m.Amount
	}
	return nil
}

func (m *Redeem) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

type Rebalance struct {
	Id   string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Fund *Fund  `protobuf:"bytes,2,opt,name=fund,proto3" json:"fund,omitempty"`
	// the height the rebalance was created
	Height int64 `protobuf:"varint,3,opt,name=height,proto3" json:"height,omitempty"`
}

func (m *Rebalance) Reset()         { *m = Rebalance{} }
func (m *Rebalance) String() string { return proto.CompactTextString(m) }
func (*Rebalance) ProtoMessage()    {}
func (*Rebalance) Descriptor() ([]byte, []int) {
	return fileDescriptor_2f7de7f2b67d1612, []int{4}
}
func (m *Rebalance) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Rebalance) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Rebalance.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Rebalance) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Rebalance.Merge(m, src)
}
func (m *Rebalance) XXX_Size() int {
	return m.Size()
}
func (m *Rebalance) XXX_DiscardUnknown() {
	xxx_messageInfo_Rebalance.DiscardUnknown(m)
}

var xxx_messageInfo_Rebalance proto.InternalMessageInfo

func (m *Rebalance) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Rebalance) GetFund() *Fund {
	if m != nil {
		return m.Fund
	}
	return nil
}

func (m *Rebalance) GetHeight() int64 {
	if m != nil {
		return m.Height
	}
	return 0
}

func init() {
	proto.RegisterType((*FundPrice)(nil), "defundlabs.defund.etf.FundPrice")
	proto.RegisterType((*Holding)(nil), "defundlabs.defund.etf.Holding")
	proto.RegisterType((*Fund)(nil), "defundlabs.defund.etf.Fund")
	proto.RegisterType((*Redeem)(nil), "defundlabs.defund.etf.Redeem")
	proto.RegisterType((*Rebalance)(nil), "defundlabs.defund.etf.Rebalance")
}

func init() { proto.RegisterFile("etf/fund.proto", fileDescriptor_2f7de7f2b67d1612) }

var fileDescriptor_2f7de7f2b67d1612 = []byte{
	// 667 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x54, 0xbf, 0x72, 0xd3, 0x4e,
	0x10, 0xb6, 0x6c, 0xc7, 0x89, 0xce, 0xf3, 0x4b, 0x71, 0x49, 0x7e, 0x08, 0x07, 0x64, 0x8f, 0x1a,
	0x4c, 0xc1, 0x89, 0x84, 0x8e, 0xd2, 0x61, 0x20, 0x69, 0x18, 0xe6, 0x86, 0x8a, 0x82, 0xcc, 0x49,
	0x77, 0x96, 0x45, 0xa4, 0x3b, 0x8d, 0xee, 0xcc, 0x90, 0x92, 0x9a, 0x26, 0x4f, 0xc2, 0x6b, 0x90,
	0x32, 0x25, 0x55, 0x60, 0x92, 0x37, 0xe0, 0x09, 0x98, 0xfb, 0x23, 0xc7, 0x99, 0x84, 0x3f, 0x43,
	0xa5, 0xfd, 0x4e, 0xbb, 0xdf, 0x7e, 0xbb, 0x7b, 0x7b, 0x60, 0x9d, 0xa9, 0x69, 0x3c, 0x9d, 0x73,
	0x8a, 0xaa, 0x5a, 0x28, 0x01, 0xb7, 0x28, 0xd3, 0xa8, 0x20, 0x89, 0x44, 0xd6, 0x44, 0x4c, 0x4d,
	0x07, 0x9b, 0x99, 0xc8, 0x84, 0xf1, 0x88, 0xb5, 0x65, 0x9d, 0x07, 0x1b, 0x49, 0x2d, 0x8e, 0x58,
	0x1d, 0xdb, 0x8f, 0x3b, 0x0c, 0x53, 0x21, 0x4b, 0x21, 0xe3, 0x84, 0x48, 0x16, 0xbf, 0xdf, 0x49,
	0x98, 0x22, 0x3b, 0x71, 0x2a, 0x72, 0xee, 0xfe, 0x0f, 0x33, 0x21, 0xb2, 0x82, 0xc5, 0x06, 0x25,
	0xf3, 0x69, 0xac, 0xf2, 0x92, 0x49, 0x45, 0xca, 0xca, 0x3a, 0x44, 0x5f, 0x3c, 0xe0, 0x3f, 0x9f,
	0x73, 0xfa, 0xaa, 0xce, 0x53, 0x06, 0xd7, 0x41, 0x3b, 0xa7, 0x81, 0x37, 0xf2, 0xc6, 0x3e, 0x6e,
	0xe7, 0x14, 0xfe, 0x0f, 0x7a, 0x33, 0x96, 0x67, 0x33, 0x15, 0xb4, 0x47, 0xde, 0xb8, 0x83, 0x1d,
	0x82, 0x2f, 0x40, 0x57, 0x13, 0x05, 0x9d, 0x91, 0x37, 0xee, 0xef, 0x0e, 0x90, 0xcd, 0x82, 0x9a,
	0x2c, 0xe8, 0x75, 0x93, 0x65, 0x72, 0xe7, 0xf4, 0x7c, 0xd8, 0xfa, 0x71, 0x3e, 0xec, 0x1f, 0x93,
	0xb2, 0x78, 0x1a, 0xe9, 0xa8, 0xe8, 0xe4, 0xdb, 0xd0, 0xc3, 0x86, 0x00, 0xee, 0x80, 0x1e, 0x29,
	0xc5, 0x9c, 0xab, 0xa0, 0x6b, 0xa8, 0xee, 0x22, 0x5b, 0x10, 0xd2, 0x05, 0x21, 0x57, 0x10, 0xda,
	0x13, 0x39, 0xc7, 0xce, 0x51, 0x6b, 0x92, 0xc7, 0x65, 0x22, 0x8a, 0x60, 0xc5, 0xe8, 0x74, 0x28,
	0xfa, 0xe8, 0x81, 0xd5, 0x7d, 0x51, 0xd0, 0x9c, 0x67, 0x70, 0x13, 0xac, 0x28, 0x71, 0xc4, 0xb8,
	0x2b, 0xc5, 0x02, 0x18, 0x80, 0xd5, 0x8a, 0xd5, 0x29, 0xe3, 0x4d, 0x39, 0x0d, 0xd4, 0x9c, 0x95,
	0x10, 0xc5, 0x01, 0x35, 0x15, 0x75, 0xb1, 0x43, 0x70, 0x00, 0xd6, 0x6c, 0xbb, 0x0f, 0xa8, 0x11,
	0xe8, 0xe3, 0x05, 0x86, 0x10, 0x74, 0xd5, 0x71, 0xc5, 0x9c, 0x0a, 0x63, 0x47, 0x9f, 0xba, 0xa0,
	0xab, 0xbb, 0xb9, 0x24, 0xd2, 0x5b, 0x16, 0xa9, 0x25, 0x10, 0x4a, 0x6b, 0x26, 0xa5, 0x91, 0xe0,
	0xe3, 0x06, 0x6a, 0x3a, 0x4e, 0x5c, 0x4b, 0x7d, 0x6c, 0x6c, 0x38, 0x02, 0x7d, 0xca, 0x64, 0x5a,
	0xe7, 0x95, 0xca, 0x05, 0x77, 0x0a, 0x96, 0x8f, 0xe0, 0x4b, 0xd0, 0x93, 0x33, 0x52, 0x33, 0x69,
	0x64, 0xfc, 0xae, 0x7f, 0x93, 0x6d, 0x37, 0x89, 0x0d, 0x37, 0x09, 0xa1, 0x48, 0x71, 0x68, 0x83,
	0x23, 0xec, 0x58, 0x60, 0x0a, 0xd6, 0x66, 0xb6, 0x87, 0x32, 0xe8, 0x8d, 0x3a, 0xe3, 0xfe, 0x6e,
	0x88, 0x6e, 0xbd, 0xa4, 0xc8, 0xb5, 0x7a, 0xf2, 0xc0, 0xd1, 0x0e, 0x2d, 0x6d, 0x13, 0x1d, 0x8d,
	0xde, 0x49, 0xc1, 0x97, 0x30, 0x5e, 0x10, 0xc3, 0x7b, 0xc0, 0xaf, 0x59, 0x42, 0x0a, 0xc2, 0x53,
	0x16, 0xac, 0x9a, 0x49, 0x5c, 0x1d, 0xe8, 0xbf, 0x5a, 0xfc, 0x33, 0xc6, 0x45, 0x19, 0xac, 0x99,
	0x92, 0xaf, 0x0e, 0xe0, 0x5b, 0xf0, 0x9f, 0x54, 0xa4, 0x56, 0x39, 0xcf, 0xcc, 0x95, 0x0d, 0xfc,
	0x3f, 0xd5, 0x7d, 0xdf, 0x09, 0xdc, 0xb2, 0x02, 0x9b, 0xe8, 0xc3, 0x4a, 0x87, 0x47, 0xf8, 0x3a,
	0x9d, 0x1e, 0x50, 0x5a, 0x33, 0xa2, 0x44, 0x1d, 0x00, 0x3b, 0x20, 0x07, 0xe1, 0x63, 0xb0, 0x51,
	0x10, 0xa9, 0x70, 0x23, 0x74, 0xdf, 0x2e, 0x46, 0xdf, 0xe8, 0xbf, 0xed, 0x57, 0xf4, 0xd9, 0x03,
	0x3d, 0xcc, 0x28, 0x63, 0xe5, 0x8d, 0xc5, 0x5a, 0x4a, 0xd3, 0xbe, 0x9e, 0x26, 0x06, 0x5d, 0xdd,
	0x63, 0xb7, 0x5a, 0xdb, 0xbf, 0xe8, 0xbe, 0xbe, 0x64, 0xd8, 0x38, 0xfe, 0xeb, 0x0a, 0x29, 0xa2,
	0xe6, 0x72, 0xb1, 0x42, 0x06, 0x45, 0x14, 0xf8, 0x8b, 0x1a, 0x6e, 0x48, 0x6e, 0x84, 0xb5, 0xff,
	0x56, 0xd8, 0xd5, 0xe3, 0xd1, 0x59, 0x7e, 0x3c, 0x26, 0x7b, 0xa7, 0x17, 0xa1, 0x77, 0x76, 0x11,
	0x7a, 0xdf, 0x2f, 0x42, 0xef, 0xe4, 0x32, 0x6c, 0x9d, 0x5d, 0x86, 0xad, 0xaf, 0x97, 0x61, 0xeb,
	0xcd, 0xc3, 0x2c, 0x57, 0xb3, 0x79, 0x82, 0x52, 0x51, 0xc6, 0x96, 0xf3, 0x91, 0xe6, 0x77, 0x76,
	0xfc, 0x21, 0xd6, 0xef, 0xa7, 0x5e, 0x34, 0x99, 0xf4, 0xcc, 0x5b, 0xf3, 0xe4, 0x67, 0x00, 0x00,
	0x00, 0xff, 0xff, 0xce, 0x5d, 0xbb, 0x04, 0x53, 0x05, 0x00, 0x00,
}

func (m *FundPrice) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FundPrice) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FundPrice) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Symbol) > 0 {
		i -= len(m.Symbol)
		copy(dAtA[i:], m.Symbol)
		i = encodeVarintFund(dAtA, i, uint64(len(m.Symbol)))
		i--
		dAtA[i] = 0x2a
	}
	if m.Amount != nil {
		{
			size, err := m.Amount.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFund(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	n2, err2 := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.Time, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(m.Time):])
	if err2 != nil {
		return 0, err2
	}
	i -= n2
	i = encodeVarintFund(dAtA, i, uint64(n2))
	i--
	dAtA[i] = 0x1a
	if m.Height != 0 {
		i = encodeVarintFund(dAtA, i, uint64(m.Height))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintFund(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Holding) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Holding) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Holding) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Type) > 0 {
		i -= len(m.Type)
		copy(dAtA[i:], m.Type)
		i = encodeVarintFund(dAtA, i, uint64(len(m.Type)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.BrokerId) > 0 {
		i -= len(m.BrokerId)
		copy(dAtA[i:], m.BrokerId)
		i = encodeVarintFund(dAtA, i, uint64(len(m.BrokerId)))
		i--
		dAtA[i] = 0x22
	}
	if m.PoolId != 0 {
		i = encodeVarintFund(dAtA, i, uint64(m.PoolId))
		i--
		dAtA[i] = 0x18
	}
	if m.Percent != 0 {
		i = encodeVarintFund(dAtA, i, uint64(m.Percent))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Token) > 0 {
		i -= len(m.Token)
		copy(dAtA[i:], m.Token)
		i = encodeVarintFund(dAtA, i, uint64(len(m.Token)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Fund) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Fund) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Fund) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.LastRebalanceHeight != 0 {
		i = encodeVarintFund(dAtA, i, uint64(m.LastRebalanceHeight))
		i--
		dAtA[i] = 0x58
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintFund(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0x52
	}
	{
		size, err := m.StartingPrice.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintFund(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x4a
	if len(m.BaseDenom) > 0 {
		i -= len(m.BaseDenom)
		copy(dAtA[i:], m.BaseDenom)
		i = encodeVarintFund(dAtA, i, uint64(len(m.BaseDenom)))
		i--
		dAtA[i] = 0x42
	}
	if m.Rebalance != 0 {
		i = encodeVarintFund(dAtA, i, uint64(m.Rebalance))
		i--
		dAtA[i] = 0x38
	}
	if len(m.Holdings) > 0 {
		for iNdEx := len(m.Holdings) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Holdings[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintFund(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x32
		}
	}
	{
		size, err := m.Shares.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintFund(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintFund(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintFund(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintFund(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Symbol) > 0 {
		i -= len(m.Symbol)
		copy(dAtA[i:], m.Symbol)
		i = encodeVarintFund(dAtA, i, uint64(len(m.Symbol)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Redeem) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Redeem) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Redeem) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Status) > 0 {
		i -= len(m.Status)
		copy(dAtA[i:], m.Status)
		i = encodeVarintFund(dAtA, i, uint64(len(m.Status)))
		i--
		dAtA[i] = 0x2a
	}
	if m.Amount != nil {
		{
			size, err := m.Amount.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFund(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.Fund != nil {
		{
			size, err := m.Fund.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFund(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintFund(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintFund(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Rebalance) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Rebalance) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Rebalance) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Height != 0 {
		i = encodeVarintFund(dAtA, i, uint64(m.Height))
		i--
		dAtA[i] = 0x18
	}
	if m.Fund != nil {
		{
			size, err := m.Fund.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFund(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintFund(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintFund(dAtA []byte, offset int, v uint64) int {
	offset -= sovFund(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *FundPrice) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovFund(uint64(l))
	}
	if m.Height != 0 {
		n += 1 + sovFund(uint64(m.Height))
	}
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.Time)
	n += 1 + l + sovFund(uint64(l))
	if m.Amount != nil {
		l = m.Amount.Size()
		n += 1 + l + sovFund(uint64(l))
	}
	l = len(m.Symbol)
	if l > 0 {
		n += 1 + l + sovFund(uint64(l))
	}
	return n
}

func (m *Holding) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Token)
	if l > 0 {
		n += 1 + l + sovFund(uint64(l))
	}
	if m.Percent != 0 {
		n += 1 + sovFund(uint64(m.Percent))
	}
	if m.PoolId != 0 {
		n += 1 + sovFund(uint64(m.PoolId))
	}
	l = len(m.BrokerId)
	if l > 0 {
		n += 1 + l + sovFund(uint64(l))
	}
	l = len(m.Type)
	if l > 0 {
		n += 1 + l + sovFund(uint64(l))
	}
	return n
}

func (m *Fund) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Symbol)
	if l > 0 {
		n += 1 + l + sovFund(uint64(l))
	}
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovFund(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovFund(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovFund(uint64(l))
	}
	l = m.Shares.Size()
	n += 1 + l + sovFund(uint64(l))
	if len(m.Holdings) > 0 {
		for _, e := range m.Holdings {
			l = e.Size()
			n += 1 + l + sovFund(uint64(l))
		}
	}
	if m.Rebalance != 0 {
		n += 1 + sovFund(uint64(m.Rebalance))
	}
	l = len(m.BaseDenom)
	if l > 0 {
		n += 1 + l + sovFund(uint64(l))
	}
	l = m.StartingPrice.Size()
	n += 1 + l + sovFund(uint64(l))
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovFund(uint64(l))
	}
	if m.LastRebalanceHeight != 0 {
		n += 1 + sovFund(uint64(m.LastRebalanceHeight))
	}
	return n
}

func (m *Redeem) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovFund(uint64(l))
	}
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovFund(uint64(l))
	}
	if m.Fund != nil {
		l = m.Fund.Size()
		n += 1 + l + sovFund(uint64(l))
	}
	if m.Amount != nil {
		l = m.Amount.Size()
		n += 1 + l + sovFund(uint64(l))
	}
	l = len(m.Status)
	if l > 0 {
		n += 1 + l + sovFund(uint64(l))
	}
	return n
}

func (m *Rebalance) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovFund(uint64(l))
	}
	if m.Fund != nil {
		l = m.Fund.Size()
		n += 1 + l + sovFund(uint64(l))
	}
	if m.Height != 0 {
		n += 1 + sovFund(uint64(m.Height))
	}
	return n
}

func sovFund(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozFund(x uint64) (n int) {
	return sovFund(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *FundPrice) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFund
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FundPrice: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FundPrice: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFund
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFund
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFund
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Height", wireType)
			}
			m.Height = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFund
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Height |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Time", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFund
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFund
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFund
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.Time, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFund
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFund
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFund
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Amount == nil {
				m.Amount = &types.Coin{}
			}
			if err := m.Amount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Symbol", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFund
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFund
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFund
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Symbol = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFund(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthFund
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Holding) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFund
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Holding: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Holding: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Token", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFund
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFund
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFund
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Token = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Percent", wireType)
			}
			m.Percent = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFund
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Percent |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PoolId", wireType)
			}
			m.PoolId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFund
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PoolId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BrokerId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFund
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFund
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFund
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BrokerId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFund
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFund
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFund
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Type = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFund(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthFund
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Fund) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFund
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Fund: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Fund: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Symbol", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFund
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFund
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFund
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Symbol = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFund
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFund
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFund
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFund
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFund
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFund
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFund
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFund
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFund
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Shares", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFund
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFund
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFund
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Shares.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Holdings", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFund
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFund
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFund
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Holdings = append(m.Holdings, Holding{})
			if err := m.Holdings[len(m.Holdings)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rebalance", wireType)
			}
			m.Rebalance = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFund
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Rebalance |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BaseDenom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFund
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFund
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFund
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BaseDenom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartingPrice", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFund
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFund
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFund
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.StartingPrice.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFund
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFund
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFund
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastRebalanceHeight", wireType)
			}
			m.LastRebalanceHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFund
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LastRebalanceHeight |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipFund(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthFund
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Redeem) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFund
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Redeem: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Redeem: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFund
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFund
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFund
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFund
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFund
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFund
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fund", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFund
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFund
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFund
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Fund == nil {
				m.Fund = &Fund{}
			}
			if err := m.Fund.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFund
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFund
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFund
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Amount == nil {
				m.Amount = &types.Coin{}
			}
			if err := m.Amount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFund
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFund
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFund
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Status = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFund(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthFund
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Rebalance) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFund
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Rebalance: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Rebalance: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFund
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFund
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFund
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fund", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFund
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFund
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFund
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Fund == nil {
				m.Fund = &Fund{}
			}
			if err := m.Fund.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Height", wireType)
			}
			m.Height = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFund
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Height |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipFund(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthFund
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipFund(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowFund
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowFund
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowFund
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthFund
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupFund
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthFund
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthFund        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowFund          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupFund = fmt.Errorf("proto: unexpected end of group")
)
